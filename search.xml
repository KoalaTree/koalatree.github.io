<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[《利用Python进行数据分析》要点笔记(一)]]></title>
      <url>https://koalatree.github.io/2017/08/10/Python_for_data_analysis(1)/</url>
      <content type="html"><![CDATA[<p><img src="/2017/08/10/Python_for_data_analysis(1)/Python_for_data_analysis(1" alt="数据分析">_1.jpg)</p>
<h2 id="一、计数统计"><a href="#一、计数统计" class="headerlink" title="一、计数统计"></a>一、计数统计</h2><p>数据集：bit.ly的1.usa.gov数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line">path = <span class="string">'usagov_bitly_data2012-03-16-1331923249.txt'</span></div><div class="line">records = [json.loads(line) <span class="keyword">for</span> line <span class="keyword">in</span> open(path)]</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="1-纯Python代码统计"><a href="#1-纯Python代码统计" class="headerlink" title="1. 纯Python代码统计"></a><strong>1. 纯Python代码统计</strong></h3><p><strong>1. </strong>建立get_count和top_counts函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_count</span><span class="params">(sequence)</span>:</span></div><div class="line">    counts = defaultdict(int)</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> sequence:</div><div class="line">        counts[x] += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> counts</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">top_counts</span><span class="params">(count_dict, n=<span class="number">10</span>)</span>:</span></div><div class="line">    value_key_pairs = [(count,tz) <span class="keyword">for</span> tz,count <span class="keyword">in</span> count_dict.items()]</div><div class="line">    value_key_pairs.sort()</div><div class="line">    <span class="keyword">return</span> value_key_pairs[<span class="number">-10</span>:]</div><div class="line"></div><div class="line">time_zones = [rec[<span class="string">'tz'</span>] <span class="keyword">for</span> rec <span class="keyword">in</span> records <span class="keyword">if</span> <span class="string">'tz'</span> <span class="keyword">in</span> rec]</div><div class="line">counts = get_count(time_zones)</div><div class="line"><span class="keyword">print</span> counts[<span class="string">'America/New_York'</span>]</div><div class="line"><span class="keyword">print</span> top_counts(counts)</div></pre></td></tr></table></figure></p>
<p><strong>2. </strong>利用Python标准库的collection.Counter类简化<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"></div><div class="line">counts = Counter(time_zones)</div><div class="line"><span class="keyword">print</span> counts.most_common(<span class="number">10</span>)</div></pre></td></tr></table></figure></p>
<h3 id="2-利用pandas进行统计"><a href="#2-利用pandas进行统计" class="headerlink" title="2. 利用pandas进行统计"></a><strong>2. 利用pandas进行统计</strong></h3><p><code>DataFrame</code>是<code>pandas</code>中最重要的数据结构，用于将数据表示为一个表格。<br><strong>1. </strong>创建DataFrame<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame, Series</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">frame = DataFrame(records)</div></pre></td></tr></table></figure></p>
<p><strong>2. </strong>输出所需信息</p>
<ul>
<li><code>frame[&#39;tz&#39;]</code>所返回的Series对象有一个<code>value_counts</code>方法，可获取所需信息。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tz_counts = frame[<span class="string">'tz'</span>].value_counts()</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>3. </strong>替换缺失值和未知空字符串</p>
<ul>
<li><code>fillna</code>函数可以替换缺失值<code>NA</code>，而未知值(空字符串)可以通过布尔型数组索引加以替换。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">clean_tz = frame[<span class="string">'tz'</span>].fillna(<span class="string">'Missing'</span>)</div><div class="line">clean_tz[clean_tz == <span class="string">''</span>] = <span class="string">'Unknown'</span></div><div class="line">tz_counts = clean_tz.value_counts()</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>4. </strong>绘制水平条形图<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">tz_counts[:<span class="number">10</span>].plot(kind = <span class="string">'barh'</span>,rot=<span class="number">0</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p><img src="http://ww1.sinaimg.cn/large/bb4f51fbly1fiefrorqlrj20x30dc0t6" alt=""><br><strong>5. </strong>其他</p>
<ul>
<li><p>输出信息摘要</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">results = Series([x.split()[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> frame.a.dropna()])</div></pre></td></tr></table></figure>
</li>
<li><p>按照系统分类用户</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cframe = frame[frame.a.notnull()]</div><div class="line">operating_system = np.where(cframe[<span class="string">'a'</span>].str.contains(<span class="string">'Windows'</span>), <span class="string">'Windows'</span>, <span class="string">'Not Windows'</span>)</div><div class="line"><span class="keyword">print</span> operating_system[:<span class="number">5</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>利用时区和系统进行分组，<code>size</code>进行计数，<code>unstack</code>对计数结果进行重塑</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">by_tz_os = cframe.groupby([<span class="string">'tz'</span>, operating_system])</div><div class="line">agg_counts = by_tz_os.size().unstack().fillna(<span class="number">0</span>)</div><div class="line"><span class="keyword">print</span> agg_counts[:<span class="number">10</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/bb4f51fbly1fiefn02boyj20ik0c2weq" alt=""></p>
<ul>
<li>获取排序索引数组，并获得top10，<code>stacked=True</code>用于生成堆积条形图<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">indexer = agg_counts.sum(<span class="number">1</span>).argsort()</div><div class="line">count_subset = agg_counts.take(indexer)[<span class="number">-10</span>:]</div><div class="line"><span class="keyword">print</span> count_subset</div><div class="line">count_subset.plot(kind=<span class="string">'barh'</span>, stacked=<span class="keyword">True</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/bb4f51fbly1fiegrai8vyj20zz0dcwf1" alt=""></p>
<ul>
<li>规范化总计为1，确定相对比例<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">normed_subset = count_subset.div(count_subset.sum(<span class="number">1</span>),axis=<span class="number">0</span>)</div><div class="line">normed_subset.plot(kind=<span class="string">'barh'</span>,stacked=<span class="keyword">True</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/bb4f51fbly1fiegvy9p7mj21190dcq3h" alt=""></p>
<h2 id="二、DataFrame操作–movielens数据集"><a href="#二、DataFrame操作–movielens数据集" class="headerlink" title="二、DataFrame操作–movielens数据集"></a>二、DataFrame操作–movielens数据集</h2><h3 id="1-数据表基本操作"><a href="#1-数据表基本操作" class="headerlink" title="1. 数据表基本操作"></a><strong>1. 数据表基本操作</strong></h3><p><strong>1. </strong>将表读取到DataFrame中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">unames = [<span class="string">'user_id'</span>, <span class="string">'gender'</span>, <span class="string">'age'</span>, <span class="string">'occupation'</span>, <span class="string">'zip'</span>]</div><div class="line">users = pd.read_table(<span class="string">'movielens/users.dat'</span>, sep=<span class="string">'::'</span>, header=<span class="keyword">None</span>, names=unames)</div><div class="line"></div><div class="line">rnames = [<span class="string">'user_id'</span>, <span class="string">'movie_id'</span>, <span class="string">'rating'</span>, <span class="string">'timestamp'</span>]</div><div class="line">ratings = pd.read_table(<span class="string">'movielens/ratings.dat'</span>, sep=<span class="string">'::'</span>, header=<span class="keyword">None</span>, names=rnames)</div><div class="line"></div><div class="line">mnames = [<span class="string">'movie_id'</span>, <span class="string">'title'</span>, <span class="string">'genres'</span>]</div><div class="line">movies = pd.read_table(<span class="string">'movielens/movies.dat'</span>, sep=<span class="string">'::'</span>, header=<span class="keyword">None</span>, names=mnames)</div></pre></td></tr></table></figure></p>
<ul>
<li>dat文件内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1::F::1::10::48067</div><div class="line">2::M::56::16::70072</div><div class="line">3::M::25::15::55117</div><div class="line">4::M::45::7::02460</div><div class="line">5::M::25::20::55455</div><div class="line">6::F::50::9::55117</div><div class="line">7::M::35::1::06810</div><div class="line">8::M::25::12::11413</div><div class="line">9::M::25::17::61614</div><div class="line">10::F::35::1::95370</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>2. </strong>将几个表合并到一个表中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data = pd.merge(pd.merge(ratings,users),movies)</div></pre></td></tr></table></figure></p>
<p><strong>3. </strong>按性别计算每部电影的平均分<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mean_ratings = data.pivot_table(<span class="string">'rating'</span>, index=<span class="string">'title'</span>, columns=<span class="string">'gender'</span>, aggfunc=<span class="string">'mean'</span>)</div></pre></td></tr></table></figure></p>
<p><strong>4. </strong>利用电影名字<code>title</code>进行分组，并统计大小，过滤小于250的数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ratings_by_title = data.groupby(<span class="string">'title'</span>).size()</div><div class="line">active_titles = ratings_by_title.index[ratings_by_title &gt;= <span class="number">250</span>]</div><div class="line">mean_ratings = mean_ratings.ix[active_titles]</div></pre></td></tr></table></figure></p>
<p><strong>5. </strong>了解女性观众最喜欢的电影,进行‘F’的降序排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top_female_ratings = mean_ratings.sort_index(by=<span class="string">'F'</span>,ascending=<span class="keyword">False</span>)</div></pre></td></tr></table></figure></p>
<h3 id="2-计算评分分歧"><a href="#2-计算评分分歧" class="headerlink" title="2. 计算评分分歧"></a><strong>2. 计算评分分歧</strong></h3><p><strong>1. </strong>依据性别进行分歧排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mean_ratings[<span class="string">'diff'</span>] = mean_ratings[<span class="string">'M'</span>] - mean_ratings[<span class="string">'F'</span>]</div><div class="line">sort_by_diff = mean_ratings.sort_index(by=<span class="string">'diff'</span>)</div><div class="line"><span class="keyword">print</span> sort_by_diff[:<span class="number">10</span>]    <span class="comment"># 获取最大分歧中的前10，以女性最喜欢的为主</span></div><div class="line"><span class="keyword">print</span> sort_by_diff[::<span class="number">-1</span>][:<span class="number">10</span>]    <span class="comment"># 获取最大分歧中的前10，以男性最喜欢的为主</span></div></pre></td></tr></table></figure></p>
<p><strong>2. </strong>不考虑性别的分歧排序，利用方差<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rating_std_by_title = data.groupby(<span class="string">'title'</span>)[<span class="string">'rating'</span>].std()</div><div class="line">rating_std_by_title = rating_std_by_title.ix[active_titles]</div><div class="line"><span class="keyword">print</span> rating_std_by_title.order(ascending=<span class="keyword">False</span>)[:<span class="number">10</span>]</div></pre></td></tr></table></figure></p>
<h2 id="三、名字数据集操作–全美婴儿姓名"><a href="#三、名字数据集操作–全美婴儿姓名" class="headerlink" title="三、名字数据集操作–全美婴儿姓名"></a>三、名字数据集操作–全美婴儿姓名</h2><h3 id="1-数据表基本操作-1"><a href="#1-数据表基本操作-1" class="headerlink" title="1. 数据表基本操作"></a><strong>1. 数据表基本操作</strong></h3><p><strong>1. </strong>从一个文件中读取数据，获取年度婴儿总数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; names1880 = pd.read_csv(<span class="string">'names/yob1880.txt'</span>, names=[<span class="string">'name'</span>,<span class="string">'sex'</span>,<span class="string">'births'</span>])</div><div class="line">&gt; <span class="keyword">print</span> names1880.groupby(<span class="string">'sex'</span>).births.sum()</div><div class="line"></div><div class="line">sex</div><div class="line">F     <span class="number">90993</span></div><div class="line">M    <span class="number">110493</span></div></pre></td></tr></table></figure></p>
<p><strong>2. </strong>将多个txt文件中的内容整合到一个DataFrame中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">years = range(<span class="number">1880</span>,<span class="number">2011</span>)</div><div class="line">pieces = []</div><div class="line">columns = [<span class="string">'name'</span>,<span class="string">'sex'</span>,<span class="string">'births'</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> year <span class="keyword">in</span> years:</div><div class="line">    path = <span class="string">'names/yob%d.txt'</span> % year</div><div class="line">    frame = pd.read_csv(path, names=columns)</div><div class="line"></div><div class="line">    frame[<span class="string">'year'</span>] = year</div><div class="line">    pieces.append(frame)</div><div class="line"></div><div class="line">names = pd.concat(pieces, ignore_index=<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p><strong>3. </strong>依照年份和性别统计出生婴儿数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">total_births = names.pivot_table(<span class="string">'births'</span>, index=<span class="string">'year'</span>, columns=<span class="string">'sex'</span>, aggfunc=sum)</div><div class="line">total_births.plot(title=<span class="string">'Total births by sex and year'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p><img src="http://ww1.sinaimg.cn/large/bb4f51fbly1fikh4rssl6j20hs0dc3za" alt=""><br><strong>4. </strong>统计名字的比例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_prop</span><span class="params">(group)</span>:</span></div><div class="line">    births = group.births.astype(float)</div><div class="line">    group[<span class="string">'prop'</span>] = births/births.sum()</div><div class="line">    <span class="keyword">return</span> group</div><div class="line"></div><div class="line">names = names.groupby([<span class="string">'year'</span>,<span class="string">'sex'</span>]).apply(add_prop)</div></pre></td></tr></table></figure></p>
<p><strong>5. </strong>检查比例的和是否满足为1<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">print</span> np.allclose(names.groupby([<span class="string">'year'</span>,<span class="string">'sex'</span>]).prop.sum(), <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p><strong>6. </strong>获取前1000频数的名字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_top1000</span><span class="params">(group)</span>:</span></div><div class="line">    <span class="keyword">return</span> group.sort_index(by=<span class="string">'births'</span>,ascending=<span class="keyword">False</span>)[:<span class="number">1000</span>]</div><div class="line"></div><div class="line">grouped = names.groupby([<span class="string">'year'</span>, <span class="string">'sex'</span>])</div><div class="line">top1000 = grouped.apply(get_top1000)</div></pre></td></tr></table></figure></p>
<h3 id="2-分析命名趋势"><a href="#2-分析命名趋势" class="headerlink" title="2. 分析命名趋势"></a><strong>2. 分析命名趋势</strong></h3><p><strong>1. </strong>分析随时间变换的几个名字的趋势<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">boys = top1000[top1000.sex == <span class="string">'M'</span>]</div><div class="line">girls = top1000[top1000.sex == <span class="string">'F'</span>]</div><div class="line"></div><div class="line">total_births = top1000.pivot_table(<span class="string">'births'</span>, index=<span class="string">'year'</span>, columns=<span class="string">'name'</span>, aggfunc=sum)</div><div class="line"></div><div class="line">subset = total_births[[<span class="string">'John'</span>, <span class="string">'Harry'</span>, <span class="string">'Mary'</span>, <span class="string">'Marilyn'</span>]]</div><div class="line">subset.plot(subplots=<span class="keyword">True</span>, figsize=(<span class="number">12</span>,<span class="number">10</span>), grid=<span class="keyword">False</span>, title=<span class="string">"Number of births per year"</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p><img src="http://ww1.sinaimg.cn/large/bb4f51fbly1fikj0tkk3dj20xc0nq3zz" alt=""><br><strong>2. </strong>评估命名多样性的增长</p>
<ul>
<li>常见名字的减少，则代表名字多样性的增加<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">table = top1000.pivot_table(<span class="string">'prop'</span>, index=<span class="string">'year'</span>, columns=<span class="string">'sex'</span>, aggfunc=sum)</div><div class="line">table.plot(title=<span class="string">'Sum of table1000.prop by year and sex'</span>,</div><div class="line">           yticks=np.linspace(<span class="number">0</span>, <span class="number">1.2</span>, <span class="number">13</span>), xticks=range(<span class="number">1880</span>, <span class="number">2020</span>, <span class="number">10</span>))</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/bb4f51fbly1fikj9thziuj20hs0dc74s" alt=""></p>
<ul>
<li>计算占出生人数前50%的不同名字的数量<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def get_quantile_count(group, q=0.5):</div><div class="line">    group = group.sort_index(by=&apos;prop&apos;, ascending=False)</div><div class="line">    return group.prop.cumsum().values.searchsorted(q) + 1</div><div class="line">diversity = top1000.groupby([&apos;year&apos;, &apos;sex&apos;]).apply(get_quantile_count)</div><div class="line">diversity = diversity.unstack(&apos;sex&apos;)</div><div class="line">diversity.head()</div><div class="line">diversity.plot(title=&quot;Number of popular in top 50%&quot;)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/bb4f51fbly1fiko0s9854j20hs0dcjrv.jpg" alt=""></p>
<h3 id="3-最后一个字母的变革"><a href="#3-最后一个字母的变革" class="headerlink" title="3. 最后一个字母的变革"></a><strong>3. 最后一个字母的变革</strong></h3><p><strong>1. </strong>绘制男女不同年份名字末字母的比例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">table = names.pivot_table(<span class="string">'births'</span>, index=last_letters, columns=[<span class="string">'sex'</span>,<span class="string">'year'</span>], aggfunc=sum)</div><div class="line">subtable = table.reindex(columns=[<span class="number">1910</span>, <span class="number">1960</span>, <span class="number">2010</span>], level=<span class="string">'year'</span>)</div><div class="line">letter_prop = subtable / subtable.sum().astype(float)</div><div class="line">fig, axes = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, figsize=(<span class="number">10</span>,<span class="number">8</span>))</div><div class="line">letter_prop[<span class="string">'M'</span>].plot(kind=<span class="string">'bar'</span>, rot=<span class="number">0</span>, ax=axes[<span class="number">0</span>], title=<span class="string">'Male'</span>)</div><div class="line">letter_prop[<span class="string">'F'</span>].plot(kind=<span class="string">'bar'</span>, rot=<span class="number">0</span>, ax=axes[<span class="number">1</span>], title=<span class="string">'Female'</span>, legend=<span class="keyword">False</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p><img src="http://ww1.sinaimg.cn/large/bb4f51fbly1fikonvjszhj20rs0m83z6" alt=""><br><strong>2. </strong>各年中以某几个字母结尾的男孩的名字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">letter_prop = table / table.sum().astype(float)</div><div class="line">dny_ts = letter_prop.ix[[<span class="string">'d'</span>,<span class="string">'n'</span>,<span class="string">'y'</span>], <span class="string">'M'</span>].T</div><div class="line">dny_ts.plot()</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p><img src="http://ww1.sinaimg.cn/large/bb4f51fbly1fikox8av0sj20hs0dcwf6.jpg" alt=""></p>
<h3 id="3-变成女孩名字的男孩名字"><a href="#3-变成女孩名字的男孩名字" class="headerlink" title="3. 变成女孩名字的男孩名字"></a><strong>3. 变成女孩名字的男孩名字</strong></h3><p><strong>1. </strong>找出以某些字母开头的一些名字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">all_names = top1000.name.unique()</div><div class="line">mask = np.array([<span class="string">'lesl'</span> <span class="keyword">in</span> x.lower() <span class="keyword">for</span> x <span class="keyword">in</span> all_names])</div><div class="line">lesley_like = all_names[mask]</div></pre></td></tr></table></figure></p>
<p><strong>2. </strong>对上述名字进行计数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">filtered = top1000[top1000.name.isin(lesley_like)]</div><div class="line">filtered.groupby(<span class="string">'name'</span>).births.sum()</div></pre></td></tr></table></figure></p>
<p><strong>3. </strong>绘制姓名变化比例的表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">table = filtered.pivot_table(<span class="string">'births'</span>, index=<span class="string">'year'</span>, columns=<span class="string">'sex'</span>, aggfunc=sum)</div><div class="line">table = table.div(table.sum(<span class="number">1</span>), axis=<span class="number">0</span>)</div><div class="line">table.plot(style=&#123;<span class="string">'M'</span>:<span class="string">'k-'</span>,<span class="string">'F'</span>:<span class="string">'k--'</span>&#125;)</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p><img src="http://ww1.sinaimg.cn/large/bb4f51fbly1fikpbbnam3j20hs0dcaan" alt=""></p>
<p>get more:<br>《》</p>
]]></content>
      
        <categories>
            
            <category> DataAnalysis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-169：Majority Element]]></title>
      <url>https://koalatree.github.io/2017/04/18/LeetCode-169_Majority_Element/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.</p>
<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>
<a id="more"></a>
<h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>给定一个大小为n的数组，找到其中的多数元素。其中的多数元素是超过n/2次重复的元素。</p>
<p>假定数组不为空，且多数数组始终存在与数组中。</p>
<ol>
<li><p><code>idea1</code>：由于这里假设数组不为空，且多数元素一定存在，该多数元素大于整个数组的n/2。步骤分为两步：</p>
<ul>
<li>对数组进行排序，多数元素一定超过n/2个，所以一定会在该位置上出现；</li>
<li>该位置上的元素一定为多数元素，直接返回该元素。</li>
</ul>
</li>
<li><p><code>idea2</code>：Moore voting algorithm.</p>
<ul>
<li>算法思想：每次都找出一对不同的元素，从数组中删掉，直到数组为空或只有一种元素；</li>
<li>不难证明，如果存在元素e出现频率超过半数，那么数组中最后剩下的就只有e。</li>
</ul>
</li>
<li><p><code>idea3</code>：一个更为直观的想法是，利用HashMap来实现每个元素与其个数一一对应，成为映射对。</p>
<ul>
<li>相对idea1和idea2的时间消耗更大。</li>
</ul>
</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ol>
<li><p>idea1—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int majorityElement(int[] nums) &#123;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="built_in">return</span> nums[nums.length/2];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>算法简单直接，时间复杂度低，Runtime：4ms.</li>
</ul>
</li>
<li><p>idea2—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int majorityElement(int[] nums) &#123;</div><div class="line">        int major = 0;</div><div class="line">        int count = 0;</div><div class="line">        <span class="keyword">for</span> (Integer num:nums)&#123;</div><div class="line">            <span class="keyword">if</span>(count == 0)&#123;</div><div class="line">                major = num;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(major != num)&#123;</div><div class="line">                count--;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> major;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在遍历过程中，当前元素与candidate相同则投支持票，否则投反对票。</li>
<li>当count状态为0时，说明之前的子数组中不存在重复次数超过一半的数，遍历余下的数组成为原问题的子问题。</li>
<li>若该数不一定存在，那么需要再一次遍历数组，鉴证找到的元素是否符合条件。</li>
<li>Moore 主页上有该问题的一个移步<a href="http://www.cs.utexas.edu/~moore/best-ideas/mjrty/example.html" target="_blank" rel="external">演示</a>。</li>
<li>Runtime: 7ms。</li>
</ul>
</li>
<li><p>idea3—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int majorityElement(int[] nums) &#123;</div><div class="line">        Map&lt;Integer,Integer&gt; myMap = new HashMap&lt;Integer, Integer&gt;();</div><div class="line">        int major = 0;</div><div class="line">        <span class="keyword">for</span> (Integer num:nums)&#123;</div><div class="line">            <span class="keyword">if</span> (!myMap.containsKey(num))&#123;</div><div class="line">                myMap.put(num,1);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                myMap.put(num,myMap.get(num)+1);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (myMap.get(num) &gt; nums.length/2)&#123;</div><div class="line">                major = num;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> major;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>算法利用HashMap的containsKey()方法来判断一个元素是否已经添加其中；</li>
<li>如果元素不存在与HashMap中，则利用put()方法将对应的元素与其个数1组成键对放入其中；</li>
<li>如果元素存在，则对相应的元素对应的个数+1；</li>
<li>在整个循环中判断当前元素的个数是否大于n/2；</li>
<li>算法的时间复杂度高，Runtime：53ms。</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-189：Rotate Array]]></title>
      <url>https://koalatree.github.io/2017/04/18/LeetCode-189_Rotate_Array/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Rotate an array of n elements to the right by k steps.</p>
<p>For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].</p>
<p>Note:<br>Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</p>
<a id="more"></a>
<h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>将一个含有n个元素的数组，旋转k步，即将右边的k个元素，从数组尾部依次移动到数组的头部。</p>
<ol>
<li><code>idea1</code>:利用分步的思想，定义一个反转数组的函数，进行三次反转，进而得到目标数组.<ul>
<li>首先进行原数组的整体反转；</li>
<li>将反转后的数组的当前k个元素进行反转；</li>
<li>再将后n-k个元素进行反转.</li>
</ul>
</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ol>
<li><p>idea1—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public void rotate(int[] nums, int k) &#123;</div><div class="line">        int n = nums.length;</div><div class="line">        k = k%n;</div><div class="line">        reverse(nums, 0, n-1);</div><div class="line">        reverse(nums, 0, k-1);</div><div class="line">        reverse(nums, k, n-1);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void reverse(int[] nums, int start, int end)&#123;</div><div class="line">        <span class="keyword">while</span>(start &lt; end)&#123;</div><div class="line">            int temp = nums[start];</div><div class="line">            nums[start] = nums[end];</div><div class="line">            nums[end] = temp;</div><div class="line">            start++;</div><div class="line">            end--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>注意这里反转函数reverse()对数组操作，每次使用首尾一一对应的元素进行反转；</li>
<li>旋转数组注意k&gt;n的情况，一旦k=n，则相当于对数组不进行操作，故这里的k=k%n，取余数.</li>
<li>Runtime：1ms.</li>
</ul>
</li>
<li><p>idea2 and idea3 有待提出.</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-219：Contains Duplicate II]]></title>
      <url>https://koalatree.github.io/2017/04/13/LeetCode-219_Contains_Duplicate_II/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.</p>
<a id="more"></a>
<h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>给定一个数组和一个整数k，找出数组中是否存在两个不同的索引i和j，使得nums[i]=num[j],并且要求i和j之间的绝对差值小于等于k.</p>
<ol>
<li><code>idea1</code>:分析题目主要有两个要求，一个是找出数组中是否存在不同的i,j,有nums[i]=num[j]，有则返回true；一个是要求i和j的绝对值差&lt;=k。<ul>
<li>nums[i]=num[j]的问题，可以利用HashSet<integer>来存储，因为HashSet中不存在重复的元素，一旦将重复元素添加如HashSet则操作会返回false;</integer></li>
<li>|i-j|&lt;=k的问题，可以利用滑动窗口的思想来解决，每次移动一个元素长度，当前在窗口中的元素添加入HashSet，不在窗口中的元素移出HashSet.</li>
</ul>
</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ol>
<li><p>idea1—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public boolean containsNearbyDuplicate(int[] nums, int k) &#123;</div><div class="line">        Set&lt;Integer&gt; <span class="built_in">set</span> = new HashSet&lt;Integer&gt;();</div><div class="line">        <span class="keyword">for</span> (int i=0; i&lt;nums.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (i &gt; k) set.remove(nums[i-k-1]);</div><div class="line">            <span class="keyword">if</span> (!set.add(nums[i])) <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>一旦元素的索引i大于制定的k，则每次循环需要将大于k个距离的索引元素移出HashSet，使用其remove()方法；</li>
<li>HashSet的add()方法，如果元素已经存在，则返回false；</li>
<li>Runtime：18ms，beats:68.49%.</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-122：Best Time to Buy and Sell Stock II]]></title>
      <url>https://koalatree.github.io/2017/04/13/LeetCode-122_Best_Time_to_Buy_and_Sell_Stock_II/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<a id="more"></a>
<h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>有一个数组，其中的元素是第i个元素是第i天股票的价格.</p>
<p>寻找在该数组给出的天数中的最大利润，可以进行多次购售。但是必须完成一次购售交易后才可进行下一次交易。</p>
<ol>
<li><p>首先不同于Question 121：Best Time to Buy and Sell Stock,这次可以进行多次购售股票，可以进行多次交易，所以解题思路则可能会完全不同。</p>
</li>
<li><p><code>idea1</code>：可以按照“121”的思路，但是需要在每次的购售之间加入入口标志和出口标志，最后返回几次购售最大值的总和。</p>
<ul>
<li>算法较为复杂，易错，不是一个好的解决思路。</li>
</ul>
</li>
<li><p><code>idea2</code>：可以换一种思路，可以当天售出拥有的股票，然后再当天买入，以这种思想替代不卖出的举动。</p>
<ul>
<li>只要后面的价格可以盈利，也就是相邻两天，后者大于前者，则当天进行两种操作，前一天买入，后一天卖出；</li>
<li>如果相邻的两天不能盈利，则不进行买卖。</li>
<li>对所有的元素进行两两依次遍历，保存所有盈利的和，进而简化了问题。</li>
</ul>
</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ol>
<li><p>idea1—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int maxProfit(int[] prices) &#123;</div><div class="line">        <span class="keyword">if</span> (prices == null || prices.length == 0)</div><div class="line">            <span class="built_in">return</span> 0;</div><div class="line">        int max = 0;</div><div class="line">        int total = 0;</div><div class="line">        int buy = prices[0];</div><div class="line">        boolean flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (int i=1; i&lt;prices.length; ++i)&#123;</div><div class="line">            <span class="keyword">if</span> (flag == <span class="literal">true</span> &amp;&amp; prices[i] &lt; buy)&#123;</div><div class="line">                buy = prices[i];</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="literal">false</span> &amp;&amp; prices[i] &lt; prices[i-1])&#123;</div><div class="line">                flag = <span class="literal">true</span>;</div><div class="line">                buy = prices[i];</div><div class="line">                total = total + max;</div><div class="line">                max = 0;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                int profit = prices[i]-buy;</div><div class="line">                <span class="keyword">if</span> (max &lt; profit)</div><div class="line">                    max = profit;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (max == 0)</div><div class="line">            <span class="built_in">return</span> total;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">return</span> total + max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>需要设置一个flag来判断买入和卖出的条件；</li>
<li>注意当盈利为零的情况需要返回的值，以及正常非零的情况下需要返回的值；</li>
<li>在完成依次交易后，需要将flag置true,max置0。</li>
<li>Runtime：2ms，beats:11.98%.</li>
</ul>
</li>
</ol>
<ol>
<li><p>idea2—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int maxProfit(int[] prices) &#123;</div><div class="line">        <span class="keyword">if</span> (prices.length == 0)</div><div class="line">            <span class="built_in">return</span> 0;</div><div class="line">        int profit=0;</div><div class="line">        <span class="keyword">for</span> (int i=0; i&lt;prices.length-1; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (prices[i+1]-prices[i] &gt; 0)&#123;</div><div class="line">                profit = profit + prices[i+1]-prices[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> profit;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>idea2明显要简单很多，易理解，易处理。</li>
<li>Runtime：2ms,和idea1相同。</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-26：Remove Duplicates from Sorted Array]]></title>
      <url>https://koalatree.github.io/2017/04/13/LeetCode-26_Remove_Duplicates_from_Sorted_Array/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>For example,<br>Given input array nums = [1,1,2],</p>
<p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the new length.</p>
<a id="more"></a>
<h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>给定一个已经排序后的数组，移除重复的元素，返回最终的数组的长度。</p>
<p>不能为另外一个数组分配额外的空间，必须使用常量内存完成。</p>
<ol>
<li>已经排序过的数组，直接利用++i的操作来赋值给不同的元素进行操作就可以.<ul>
<li>需要注意，仅需返回最终的数组的长度即可，无需关心在返回的长度之后还存在什么.</li>
</ul>
</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ol>
<li><p>++i—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int removeDuplicates(int[] nums) &#123;</div><div class="line">        <span class="keyword">if</span>(nums.length == 0)</div><div class="line">            <span class="built_in">return</span> 0;</div><div class="line">        int i = 0;</div><div class="line">        <span class="keyword">for</span>(int j=0; j&lt;nums.length; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[j] != nums[i])&#123;</div><div class="line">                nums[++i] = nums[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> ++i;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>最后注意，返回的是数组的长度，长度和索引相差1，故返回++i.</li>
<li>Runtime：18ms，还有待提出其他算法来提高算法的运行算法.</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-66：Plus One]]></title>
      <url>https://koalatree.github.io/2017/04/13/LeetCode-66_Plus_One/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given a non-negative integer represented as a non-empty array of digits, plus one to the integer.</p>
<p>You may assume the integer do not contain any leading zero, except the number 0 itself.</p>
<p>The digits are stored such that the most significant digit is at the head of the list.</p>
<a id="more"></a>
<h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>利用一个非空的数组的数字来代表一个非负整数，为该整数加1. 假设该整数的前面没有0，最高有效位位于头部。</p>
<ol>
<li>以十进制的加法规则进行加1则可。<ul>
<li>从末位开始判断，当前位&lt;9则加1后直接返回数组，否则当前位置0，高位加1；</li>
<li>需要注意所有位均为9的情况。</li>
</ul>
</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ol>
<li><p>十进制加法规则—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int[] plusOne(int[] digits) &#123;</div><div class="line">        int n = digits.length;</div><div class="line">        <span class="keyword">for</span> (int i=n-1; i&gt;=0; i--)&#123;</div><div class="line">            <span class="keyword">if</span>(digits[i] &lt; 9)&#123;</div><div class="line">                digits[i]++;</div><div class="line">                <span class="built_in">return</span> digits;</div><div class="line">            &#125;</div><div class="line">            digits[i] = 0;</div><div class="line">        &#125;</div><div class="line">        int[] newdigits = new int[n+1];</div><div class="line">        newdigits[0] = 1;</div><div class="line">        <span class="built_in">return</span> newdigits;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在所有位均为9的情况下，数组的大小不够需要增加一位空间，算法中直接创建一个新的数组；</li>
<li>这里利用了整型数组的默认值均为0，故只需将最高位置1，返回新数组即为原数组加1后的数组.</li>
<li>Runtime：0ms.</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-121：Best Time to Buy and Sell Stock]]></title>
      <url>https://koalatree.github.io/2017/04/12/LeetCode-121_Best%20Time_to_Buy_and_Sell_Stock/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p>Example 1:<br>Input: [7, 1, 5, 3, 6, 4]<br>Output: 5<br>max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)</p>
<a id="more"></a>
<p>Example 2:<br>Input: [7, 6, 4, 3, 1]<br>Output: 0<br>In this case, no transaction is done, i.e. max profit = 0.</p>
<h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>给定一个数组，其中的第i个元素为第i天给出的股票价格，求出的一次购售利润。</p>
<ol>
<li>对于这类问题，只需要对数组进行一次遍历，在遍历过程中记录利润，并在循环过程中保留最大利润即可。</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ol>
<li><p>一次遍历—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int maxProfit(int[] prices) &#123;</div><div class="line">        <span class="keyword">if</span>(prices == null || prices.length == 0)&#123;</div><div class="line">            <span class="built_in">return</span> 0;</div><div class="line">        &#125;</div><div class="line">        int buy = prices[0];</div><div class="line">        int max = 0;</div><div class="line">        <span class="keyword">for</span> (int i=0; i&lt;prices.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (prices[i] &lt; buy)&#123;</div><div class="line">                buy = prices[i];</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                int profit = prices[i]-buy;</div><div class="line">                <span class="keyword">if</span> (max &lt; profit)&#123;</div><div class="line">                    max = profit;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>处理过程中，要考虑数组为null的情况；</li>
<li>这里在遍历的过程中，一旦遇到价格大于买入价格，就计算利润，保留最大利润，避免两次for循环。</li>
<li>Runtime:2ms.</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-268：Missing Number]]></title>
      <url>https://koalatree.github.io/2017/04/12/LeetCode-268_Missing_Number/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.</p>
<p>For example,<br>Given nums = [0, 1, 3] return 2.</p>
<p>Note:<br>Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?</p>
<a id="more"></a>
<h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>给定一个含有n个不重复数字的数组，n个数字来自0, 1, 2, …, n, 找出其中丢失的数字。（这里并没有说明是按序排列的数组）</p>
<ol>
<li><p><code>Xor异或</code>：由于b^b=0(这里是进行位异或)，所以a^b^b=a^0=a.</p>
<ul>
<li>这里取a=0,依次与‘i’，‘nums[i]’进行异或运算.</li>
<li>如：a = a^0^0^1^1…^k^…n^n = a^k = 0^k = k.</li>
</ul>
</li>
<li><p><code>Sum求和</code>：由于题目告诉只缺少一个数字，故用0~n的和减去数组的和得到的即为要求的数字.</p>
<ul>
<li>0~n的和：n(n+1)/2.</li>
</ul>
</li>
<li><p><code>BinarySearch</code>：将数组进行排序后，可以利用二分查找的方法来找到缺少的数字，不过对算法进行略微的改动.</p>
</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ol>
<li><p>Xor异或—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int missingNumber(int[] nums) &#123;</div><div class="line">        int a = 0, i = 0;</div><div class="line">        <span class="keyword">for</span> (i=0; i&lt;nums.length;i++)&#123;</div><div class="line">            a = a^i^nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> a^i;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>算法中i从0~n-1(因为数组的大小为n),所以在循环结束后，i&lt;=nums[i];</li>
<li>如果缺少的数字k&lt;n,则最后a^i以消去最后的nums[n-1];</li>
<li>如果缺少的数字k=n,则最后a^i=i,刚好为缺少的数字n;</li>
<li>所以最后返回的值为a^i,这里注意i要设置为for循环外的变量。</li>
<li>时间复杂度低，Runtime：1ms.</li>
</ul>
</li>
<li><p>Sum求和—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int missingNumber(int[] nums) &#123;</div><div class="line">        int n = nums.length;</div><div class="line">        int sum = (n+0)*(n+1)/2;</div><div class="line">        <span class="keyword">for</span> (int i=0; i&lt;n; i++)&#123;</div><div class="line">            sum -= nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>算法的时间复杂度为O(n),空间复杂度为O(1),Runtime：1ms.</li>
</ul>
</li>
<li><p>BinarySearch—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int missingNumber(int[] nums) &#123;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        int low = 0;</div><div class="line">        int high = nums.length;</div><div class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</div><div class="line">            int mid = (low+high)/2;</div><div class="line">            <span class="keyword">if</span> (nums[mid] &gt; mid) high = mid;</div><div class="line">            <span class="keyword">else</span> low = mid+1;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> low;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>算法这里有部分的变动,需要注意：<ul>
<li>high = nums.length,而不是nums.length-1,这里相当于high = n,因为搜索范围为0~n；</li>
<li>循环条件为low&lt;high,而不是low&lt;=high;</li>
</ul>
</li>
<li>算法的时间复杂度较前两个要高，Runtime：15ms.</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-118：Pascal's Triangle]]></title>
      <url>https://koalatree.github.io/2017/04/11/LeetCode-118_Pascal's_Triangle/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given numRows, generate the first numRows of Pascal’s triangle.</p>
<p>For example, given numRows = 5,<br>Return<br>[<br>     [1],<br>    [1,1],<br>   [1,2,1],<br>  [1,3,3,1],<br> [1,4,6,4,1]<br>]</p>
<a id="more"></a>
<h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>给定行数，生成制定行数的Pascal’s triangle(又称，杨辉三角)。</p>
<ol>
<li><p>直接使用Pascal三角的生成方式进行解题.</p>
<ul>
<li><code>Java</code>：</li>
<li>使用ArrayList<list<integer>&gt;结构存储将要返回的Pascal三角的所有行；</list<integer></li>
<li><p>使用ArrayList<integer>结果存储单行.</integer></p>
<p>*<code>Python</code>:</p>
</li>
<li>使用Python中的list存储Pascal三角，和Java的结构相同。</li>
</ul>
</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ol>
<li><p>ArrayList—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">	public List&lt;List&lt;Integer&gt;&gt; generate(int numRows) &#123;</div><div class="line">		List&lt;List&lt;Integer&gt;&gt; allrows = new ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">		ArrayList&lt;Integer&gt; row = new ArrayList&lt;Integer&gt;();</div><div class="line">		<span class="keyword">for</span> (int i=0; i&lt;numRows; i++)&#123;</div><div class="line">			row.add(0,1);</div><div class="line">			<span class="keyword">for</span>(int j=1; j&lt;row.size()-1;j++)&#123;</div><div class="line">				row.set(j, row.get(j)+row.get(j+1));</div><div class="line">			&#125;</div><div class="line">			allrows.add(new ArrayList&lt;Integer&gt;(row));</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> allrows;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>生成Pascal三角主要包括三个过程：<ul>
<li>首先生成行，利用ArrayList的add()方法，对首位添1—<code>row.add(0,1)</code>;</li>
<li>对从第三行开始的行，利用已经生成好的行(这里相当于是上一行元素)进行相应元素的替换，利用set()方法;</li>
<li>将生成的行添加到Pascal三角的ArrayList<list<integer>&gt;结构中.</list<integer></li>
</ul>
</li>
</ul>
</li>
<li><p>List—<code>Python</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class Solution(object):</div><div class="line">	def generate(self, numRows):</div><div class="line">		<span class="string">""</span><span class="string">"</span></div><div class="line"><span class="string">		:type numRows: int</span></div><div class="line"><span class="string">		:rtype: List[List[int]]</span></div><div class="line"><span class="string">		"</span><span class="string">""</span></div><div class="line">		L = [[1]]</div><div class="line">		<span class="keyword">if</span> numRows &lt; 1:</div><div class="line">			<span class="built_in">return</span> []</div><div class="line">		<span class="keyword">if</span> numRows == 1:</div><div class="line">			<span class="built_in">return</span> L</div><div class="line">		i = 1</div><div class="line">		<span class="keyword">while</span> i &lt; numRows:</div><div class="line">			L.append([sum(res) <span class="keyword">for</span> res <span class="keyword">in</span> zip([0]+L[i-1],L[i-1]+[0])])</div><div class="line">			i = i + 1</div><div class="line">		<span class="built_in">return</span> L</div></pre></td></tr></table></figure>
<ul>
<li>通过观察Pascal三角的结构，从第三行开始，其每一行的list，等于前一行的list分别在首位添1和在末位添1对应位相加所得的结果；</li>
<li>这里使用Python内建函数zip()对两个list进行对应位置的组合相加；</li>
<li>利用Python编写的该方法目前在执行时间上耗费较大，LeetCode目前运行时间：85ms，3.13%的beats率。</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-119：Pascal's Triangle II]]></title>
      <url>https://koalatree.github.io/2017/04/11/LeetCode-119_Pascal's_Triangle_II/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an index k, return the kth row of the Pascal’s triangle.</p>
<p>For example, given k = 3,<br>Return [1,3,3,1].</p>
<p>Note:<br>optimize your algorithm to use only O(k) extra space.</p>
<a id="more"></a>
<h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>给定一个系数k，返回Pascal三角的第k行，将优化算法，使得算法的空间复杂度为O(k).</p>
<ol>
<li>同LeetCode-118，直接使用Pascal三角的生成方式进行解题.<ul>
<li>该题较118更为简单，无需要对Pascal三角的结构进行存储，仅需依次生成行至所需的行数即可；</li>
<li>使用ArrayList<integer>存储行.</integer></li>
</ul>
</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ol>
<li><p>ArrayList—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public List&lt;Integer&gt; getRow(int rowIndex) &#123;</div><div class="line">        ArrayList&lt;Integer&gt; row = new ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">for</span> (int i=0; i&lt;rowIndex+1; i++)&#123;</div><div class="line">            row.add(0,1);</div><div class="line">            <span class="keyword">for</span>(int j=1; j&lt;row.size()-1;j++)&#123;</div><div class="line">                row.set(j, row.get(j)+row.get(j+1));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> row;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>虽然该题较118更为简单，但是依然需要注意，需要返回的是第k行，这里第0行为[1].</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-35：Search Insert Position]]></title>
      <url>https://koalatree.github.io/2017/04/11/LeetCode-35_Search_Insert_Position/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<p>You may assume no duplicates in the array.</p>
<p>Here are few examples.<br>[1,3,5,6], 5 → 2<br>[1,3,5,6], 2 → 1<br>[1,3,5,6], 7 → 4<br>[1,3,5,6], 0 → 0</p>
<a id="more"></a>
<h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>给定一个已经排序的数组和目标值，存在，则返回目标值的索引；否则，返回应插入该数组的位置索引。</p>
<p>对于一个已经排序过的数组进行查找，则使用binary search较为常用。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ol>
<li><p>Binary Search—<code>Java</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">	public int searchInsert(int[] nums, int target) &#123;</div><div class="line">		int low = 0, high = nums.length-1;</div><div class="line">		<span class="keyword">while</span>(low &lt;= high)&#123;</div><div class="line">			int mid = (low + high)/2;</div><div class="line">			<span class="keyword">if</span> (nums[mid] == target) <span class="built_in">return</span> mid;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) high = mid-1;</div><div class="line">			<span class="keyword">else</span> low = mid+1;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> low;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Java中，对于一个array，length是其属性，不是方法，使用：<code>nums.length</code>.</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
            <tag> BinarySearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简洁git笔记(三)]]></title>
      <url>https://koalatree.github.io/2017/03/06/Abstract_git_notes(3)/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fddctb4tylj20dw07gabc" alt="GitHub"></p>
<p>本次笔记主要关于git标签管理以及对于自定义git的学习。</p>
<a id="more"></a>
<h2 id="六、标签管理"><a href="#六、标签管理" class="headerlink" title="六、标签管理"></a>六、标签管理</h2><p>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p>
<p>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。</p>
<p>tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p>
<h3 id="1-创建标签"><a href="#1-创建标签" class="headerlink" title="1. 创建标签"></a><strong>1. 创建标签</strong></h3><ol>
<li><p>在分支上创建标签—<code>git tag &lt;name&gt;</code></p>
<ul>
<li><p>切换到你想要创建标签的分支上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git branch</div><div class="line">* dev</div><div class="line">  master</div><div class="line">$ git checkout master</div><div class="line">Switched to branch <span class="string">'master'</span></div></pre></td></tr></table></figure>
</li>
<li><p>在该分支上创建新的标签</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag v1.0</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>查看当前分支上的所有标签—<code>git tag</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git tag</div><div class="line">v1.0</div></pre></td></tr></table></figure>
<ul>
<li>默认标签是打在最新提交的commit上的。</li>
</ul>
</li>
<li><p>为遗漏掉的补打标签</p>
<ul>
<li><p>查看历史提交的<code>commit id</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --pretty=oneline --abbrev-commit</div><div class="line">6a5819e merged bug fix 101</div><div class="line">cc17032 fix bug 101</div><div class="line">7825a50 merge with no-ff</div><div class="line">6224937 add merge</div><div class="line">59bc1cb conflict fixed</div><div class="line">400b400 &amp; simple</div><div class="line">75a857c AND simple</div><div class="line">fec145a branch <span class="built_in">test</span></div><div class="line">d17efd8 remove test.txt</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>如：对<code>merge with no-ff</code>这次提交打标签</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag v0.9 6224937</div></pre></td></tr></table></figure>
</li>
<li><p>查看分支所有标签</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git tag</div><div class="line">v0.9</div><div class="line">v1.0</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>查看标签信息—<code>git show &lt;tagname&gt;</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git show v0.9</div><div class="line">commit 1677e1acb7598d81766f21c051d0fe502b9bfd88</div><div class="line">Merge: 77be094 8238f43</div><div class="line">Author: KoalaTree &lt;631548343@qq.com&gt;</div><div class="line">Date:   Wed Mar 1 20:31:36 2017 +0800</div><div class="line"></div><div class="line">    merge with no-ff</div></pre></td></tr></table></figure>
</li>
<li><p>创建带有说明的标签</p>
<ul>
<li><p>用-a指定标签名，-m指定说明文字</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -a v0.1 -m <span class="string">"version 0.1 released"</span> 3628164</div></pre></td></tr></table></figure>
</li>
<li><p>查看标签说明</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git show v0.1</div><div class="line">tag v0.1</div><div class="line">Tagger: KoalaTree &lt;631548343@qq.com&gt;</div><div class="line">Date:   Mon Mar 6 20:22:57 2017 +0800</div><div class="line"></div><div class="line">version 0.1 released</div><div class="line"></div><div class="line">commit 2294c5323dbb2bd48ed6452bb6db03de4cb9cab4</div><div class="line">Author: KoalaTree &lt;631548343@qq.com&gt;</div><div class="line">Date:   Thu Feb 23 14:50:12 2017 +0800</div><div class="line"></div><div class="line">	append GPL</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>通过-s用私钥签名一个标签</p>
<ul>
<li><p>私钥签名创建标签</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -s v0.2 -m <span class="string">"signed version 0.2 released"</span> fec145a</div></pre></td></tr></table></figure>
</li>
<li><p>签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错，如果报错，请参考GnuPG帮助文档配置Key。</p>
</li>
<li>用PGP签名的标签是不可伪造的，因为可以验证PGP签名。</li>
</ul>
</li>
</ol>
<h3 id="2-操作标签"><a href="#2-操作标签" class="headerlink" title="2. 操作标签"></a><strong>2. 操作标签</strong></h3><ol>
<li><p>删除标签—<code>git tag -d &lt;tagname&gt;</code></p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git tag -d v0.1</div><div class="line">Deleted tag <span class="string">'v0.1'</span> (was e078af9)</div></pre></td></tr></table></figure>
<ul>
<li>创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</li>
</ul>
</li>
<li><p>推送某个标签到远程—<code>git push origin &lt;tagname&gt;</code> </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git push origin v1.0</div><div class="line">Total 0 (delta 0), reused 0 (delta 0)</div><div class="line">To https://github.com/KoalaTree/learngit.git</div><div class="line"> * [new tag]         v1.0 -&gt; v1.0</div></pre></td></tr></table></figure>
</li>
<li><p>一次性推送全部未推送标签到远程—<code>git push origin --tags</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git push origin --tags</div><div class="line">Total 0 (delta 0), reused 0 (delta 0)</div><div class="line">To https://github.com/KoalaTree/learngit.git</div><div class="line"> * [new tag]         v0.9 -&gt; v0.9</div></pre></td></tr></table></figure>
</li>
<li><p>删除远程标签</p>
<ul>
<li><p>首先删除本地标签</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">C:\git\learngit&gt;git tag -d v0.9</div><div class="line">Deleted tag <span class="string">'v0.9'</span> (was 1677e1a)</div></pre></td></tr></table></figure>
</li>
<li><p>从远程删除。删除命令也是<code>push</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">C:\git\learngit&gt;git push origin :refs/tags/v0.9</div><div class="line">To https://github.com/KoalaTree/learngit.git</div><div class="line"> - [deleted]         v0.9</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="七、自定义git"><a href="#七、自定义git" class="headerlink" title="七、自定义git"></a>七、自定义git</h2><p>虽然在安装Git一节中，已经配置了user.name和user.email，实际上，Git还有很多可配置项。</p>
<p>如：让Git显示颜色，会让命令输出看起来更醒目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global color.ui <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>下面，我们进行学习git的配置以及其他自定义知识。</p>
<h3 id="1-忽略特殊文件"><a href="#1-忽略特殊文件" class="headerlink" title="1. 忽略特殊文件"></a><strong>1. 忽略特殊文件</strong></h3><p>有时必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件等等，每次<code>git status</code>都会显示Untracked files …。</p>
<p>解决方法：在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p>
<p>不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用。所有配置文件可以直接在线浏览GitHub官方的<a href="https://github.com/github/gitignore" target="_blank" rel="external">gitignore</a>.</p>
<p>忽略文件的原则：</p>
<pre><code>* 忽略操作系统自动生成的文件，比如缩略图等；
* 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
* 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
</code></pre><ol>
<li><p>如在Windows下进行Python开发。如果有自定义目录，目录下就会有Desktop.ini文件。需要在</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Windows:</span></div><div class="line">Thumbs.db</div><div class="line">ehthumbs.db</div><div class="line">Desktop.ini</div></pre></td></tr></table></figure>
</li>
<li><p>继续忽略Python编译产生的.pyc、.pyo、dist等文件或目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python:</span></div><div class="line">*.py[cod]</div><div class="line">*.so</div><div class="line">*.egg</div><div class="line">*.egg-info</div><div class="line">dist</div><div class="line">build</div></pre></td></tr></table></figure>
</li>
<li><p>加上自己定义的文件，最终得到一个完整的.gitignore文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Windows:</span></div><div class="line">Thumbs.db</div><div class="line">ehthumbs.db</div><div class="line">Desktop.ini</div><div class="line"></div><div class="line"><span class="comment"># Python:</span></div><div class="line">*.py[cod]</div><div class="line">*.so</div><div class="line">*.egg</div><div class="line">*.egg-info</div><div class="line">dist</div><div class="line">build</div><div class="line"></div><div class="line"><span class="comment"># My configurations:</span></div><div class="line">db.ini</div><div class="line">deploy_key_rsa</div></pre></td></tr></table></figure>
</li>
<li><p>最后一步就是把.gitignore也提交到Git</p>
</li>
</ol>
<h3 id="2-配置别名"><a href="#2-配置别名" class="headerlink" title="2. 配置别名"></a><strong>2. 配置别名</strong></h3><ol>
<li><p>简化命令输入</p>
<ul>
<li><p>用git st替代git status：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.st status</div></pre></td></tr></table></figure>
</li>
<li><p>举例：用co表示checkout，ci表示commit，br表示branch</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.co checkout</div><div class="line">$ git config --global alias.ci commit</div><div class="line">$ git config --global alias.br branch</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>配置撤销修改别名</p>
<ul>
<li>命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区，这里配置一个unstage别名。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.unstage <span class="string">'reset HEAD'</span></div><div class="line"><span class="comment">##  git unstage test.py  &lt;-----------&gt; git reset HEAD test.py</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>配置一个<code>git last</code>让其显示最后一次提交信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.last <span class="string">'log -1'</span></div></pre></td></tr></table></figure>
<ul>
<li>这里git会报错，可以直接到gitconfig文件中，手动添加。</li>
</ul>
</li>
<li>配置一个显示良好log的<code>git lg</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>效果图<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fddfj7bzaxj20mf099whg" alt="git lg"></li>
</ul>
<h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a><strong>3. 配置文件</strong></h3><p>配置Git的时候，加上–global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p>
<ol>
<li><p>每个仓库的Git配置文件都放在<code>.git/config</code>文件中。</p>
<ul>
<li><p>利用cat命令查看</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">C:\git\learngit&gt;cat .git/config</div><div class="line">[core]</div><div class="line">		repositoryformatversion = 0</div><div class="line">		filemode = <span class="literal">false</span></div><div class="line">		bare = <span class="literal">false</span></div><div class="line">		logallrefupdates = <span class="literal">true</span></div><div class="line">		symlinks = <span class="literal">false</span></div><div class="line">		ignorecase = <span class="literal">true</span></div><div class="line">[remote <span class="string">"origin"</span>]</div><div class="line">		url = https://github.com/KoalaTree/learngit.git</div><div class="line">		fetch = +refs/heads/*:refs/remotes/origin/*</div><div class="line">[branch <span class="string">"master"</span>]</div><div class="line">		remote = origin</div><div class="line">		merge = refs/heads/master</div><div class="line">[<span class="built_in">alias</span>]</div><div class="line">	last = <span class="built_in">log</span> -1</div></pre></td></tr></table></figure>
</li>
<li><p>别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。</p>
</li>
</ul>
</li>
<li>当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中(如我的是在C:\Users\V中)：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ cat .gitconfig</div><div class="line">[user]</div><div class="line">        name = KoalaTree</div><div class="line">        email = 631548343@qq.com</div><div class="line">[filter <span class="string">"lfs"</span>]</div><div class="line">        clean = git-lfs clean %f</div><div class="line">        smudge = git-lfs smudge %f</div><div class="line">        required = <span class="literal">true</span></div><div class="line">[color]</div><div class="line">        ui = <span class="literal">true</span></div><div class="line">[<span class="built_in">alias</span>]</div><div class="line">        st = status</div><div class="line">        unstage = reset HEAD</div><div class="line">        last = <span class="built_in">log</span> -1</div><div class="line">        lg = <span class="built_in">log</span> --color --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</li>
</ul>
<h3 id="4-搭建git服务器"><a href="#4-搭建git服务器" class="headerlink" title="4. 搭建git服务器"></a><strong>4. 搭建git服务器</strong></h3><p>为保护商业性，在不愿意公开源码的时候，可以搭建属于自己的git服务器。</p>
<p>搭建Git服务器需要准备一台运行Linux的机器，推荐用Ubuntu或Debian，通过几条简单的apt命令就可以完成安装。</p>
<ol>
<li>第零步：假设已经有sudo权限的用户账号。</li>
<li><p>第一步：安装git。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install git</div></pre></td></tr></table></figure>
</li>
<li><p>第二步：创建一个git用户，用来运行git服务。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo adduser git</div></pre></td></tr></table></figure>
</li>
<li><p>第三步：创建证书登录。<br>收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。</p>
</li>
<li><p>第四步：初始化Git仓库。</p>
<ul>
<li><p>选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo git init --bare sample.git</div></pre></td></tr></table></figure>
</li>
<li><p>此时，Git会创建一个裸仓库，没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。</p>
</li>
<li>然后，把owner改为git<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chown -R git:git sample.git</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>第五步: 禁用shell登录。</p>
<ul>
<li>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。</li>
<li><p>找到类似下面的一行:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git:x:1001:1001:,,,:/home/git:/bin/bash</div><div class="line"><span class="comment">## 改为 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span></div></pre></td></tr></table></figure>
</li>
<li><p>git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p>
</li>
</ul>
</li>
<li><p>第六步，克隆远程仓库。</p>
<ul>
<li>通过<code>git clone</code>命令克隆远程仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@server:/srv/sample.git</div><div class="line">Cloning into <span class="string">'sample'</span>...</div><div class="line">warning: You appear to have cloned an empty repository.</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>方便管理公钥，用Gitosis。</p>
</li>
<li>控制git权限，用Gitolite。</li>
</ol>
<p>get more:<br>《<a href="/2017/02/23/Abstract_git_notes(1)/" title="简洁git笔记(一)">简洁git笔记(一)</a>》<br>《<a href="/2017/03/01/Abstract_git_notes(2)/" title="简洁git笔记(二)">简洁git笔记(二)</a>》</p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> 标签管理 </tag>
            
            <tag> 自定义git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简洁git笔记(二)]]></title>
      <url>https://koalatree.github.io/2017/03/01/Abstract_git_notes(2)/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd3ovhlwksj20fm09vjro" alt="git2"></p>
<p>在<a href="/2017/02/23/Abstract_git_notes(1">简洁git笔记(一)</a>)中，我们主要学习了git版本库的创建以及仓库管理的相关命令，在以后的git使用中我们再也无须担心git仓库文件备份或者丢失的问题。</p>
<p>本篇继续学习git的其他功能。</p>
<a id="more"></a>
<h2 id="四、远程仓库"><a href="#四、远程仓库" class="headerlink" title="四、远程仓库"></a>四、远程仓库</h2><p>Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。</p>
<p>虽然我们完全可以自己搭建一台运行Git的服务器，不过现阶段，为了学Git而搭建服务器绝对是小题大作。目前<a href="https://github.com/" target="_blank" rel="external">GitHub</a> 这个网站就为我们提供Git仓库托管服务，只要注册一个GitHub账号，就可以免费获得Git远程仓库。<br>有关GitHub账号注册的方法，可以自行搜索方法。</p>
<p>由于我们自己本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，在此介绍一些相关设置。</p>
<ol>
<li>创建SSH Key。在用户主目录下，查看是否有.ssh目录。如果有，则该目录下有没有id_rsa和id_rsa.pub这两个文件。若已有，可直接跳到下一步；若没有，打开Shell（Windows下打开Git Bash），创建SSH Key：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>#这里要把邮件地址换成你自己的邮件地址<br>最后若一切顺利，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对。id_rsa是私钥，不能泄露出去；id_rsa.pub是公钥，可以放心地告诉任何人。</p>
<ol>
<li>登陆GitHub，打开“settings”，“SSH Keys”页面，然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。点“Add Key”，你就应该看到已经添加的Key。</li>
</ol>
<p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>
<p>GitHub允许添加多个Key。假定有若干电脑，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p>
<p>下面确保你拥有一个GitHub账号后，即将开始远程仓库的学习。</p>
<h3 id="1-添加远程库"><a href="#1-添加远程库" class="headerlink" title="1. 添加远程库"></a><strong>1. 添加远程库</strong></h3><p>倘若已经在本地创建了一个Git仓库，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，可谓一举多得。</p>
<ol>
<li>首先，登陆GitHub，然后点击“Repositories”，点击“New”按钮，开始创建一个新的仓库，这里我们创建<code>learngit</code>仓库，描述可自行填写。点击“Create repository”按钮，就成功地创建了一个新的Git仓库。</li>
<li><p>目前，在GitHub上的这个<code>learngit</code>仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p>
<ul>
<li><p>现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin https://github.com/KoalaTree/learngit.git</div></pre></td></tr></table></figure>
<p>#这里是我的GitHub上所提示的。要填写自己的GitHub连接。</p>
</li>
<li>添加后，Git默认远程库的名字就是origin，也可以改成别的，但origin一看就知道是远程库，故不建议做修改。</li>
</ul>
</li>
<li>把本地库的所有内容推送到远程库上：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div><div class="line">Counting objects: 12, <span class="keyword">done</span>.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (8/8), <span class="keyword">done</span>.</div><div class="line">Writing objects: 100% (12/12), 1.00 KiB | 0 bytes/s, <span class="keyword">done</span>.</div><div class="line">Total 12 (delta 1), reused 0 (delta 0)</div><div class="line">remote: Resolving deltas: 100% (1/1), <span class="keyword">done</span>.</div><div class="line">To https://github.com/KoalaTree/learngit.git</div><div class="line"> * [new branch]      master -&gt; master</div><div class="line">Branch master <span class="built_in">set</span> up to track remote branch master from origin.</div></pre></td></tr></table></figure>
</li>
</ol>
<p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。<br>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd3qugpdewj20rt0ef427" alt="learngit"></p>
<p>从现在起，只要本地作了提交，就可以。通过命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure></p>
<p>把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库。</p>
<h3 id="2-从远程克隆"><a href="#2-从远程克隆" class="headerlink" title="2. 从远程克隆"></a><strong>2. 从远程克隆</strong></h3><p>那么如何将远程库克隆到本地库中？</p>
<ol>
<li>首先，登陆GitHub，创建一个新的仓库，名字叫<code>gitskills</code>：<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd3ub1sez1j20kp0etdiz" alt="gitskills"><br>这里勾选<code>Initialize this repository with a README</code>，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件。</li>
<li>远程库已经准备好了，下一步是用命令<code>git clone</code>克隆一个本地库：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/KoalaTree/gitskills</div><div class="line">Cloning into <span class="string">'gitskills'</span>...</div><div class="line">remote: Counting objects: 3, <span class="keyword">done</span>.</div><div class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</div><div class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="五、分支管理"><a href="#五、分支管理" class="headerlink" title="五、分支管理"></a>五、分支管理</h2><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p>
<p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p>
<p>Git无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。</p>
<h3 id="1-创建与合并"><a href="#1-创建与合并" class="headerlink" title="1. 创建与合并"></a><strong>1. 创建与合并</strong></h3><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p>
<ol>
<li>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd3wezx3bwj208d0473yd" alt="master-HEAD"><br>2.每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长：</li>
</ol>
<video controls autoplay name="media"><source src="/assets/video/master-branch-forward.mp4" type="video/mp4"></video><br>3. 当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd3xazci2jj20a706hwee" alt="master-div"><br>Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！<br>4. 从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd3xeddeayj20dq06ha9z" alt="div-HEAD"><br>5. 假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd3xfu3eg2j20br0663yf" alt="master-div-HEAD"><br>6. 合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd3xh754u5j20br04fdfp" alt="delete-div"><br>7. 视频过程如下：<br><br><video controls autoplay name="media"><source src="/assets/video/master-and-dev-ff.mp4" type="video/mp4"></video>

<p>下面是整个过程的指令：</p>
<ul>
<li>1.选择一个仓库，这里选择<code>learngit</code>，创建dev分支，并切换到dev分支—<code>git checkout -b dev</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev</div><div class="line">Switched to a new branch <span class="string">'dev'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git branch dev</div><div class="line">$ git checkout dev</div><div class="line">Switched to branch <span class="string">'dev'</span></div></pre></td></tr></table></figure></p>
<ul>
<li>2.查看当前分支—<code>git branch</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git branch</div><div class="line">* dev</div><div class="line">  master</div></pre></td></tr></table></figure>
</li>
</ul>
<p>git branch命令会列出所有分支，当前分支前面会标一个*号。</p>
<ul>
<li><p>3.在<code>readme.txt</code>加一行，并提交,如：</p>
<ul>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Creating a new branch is quick.</div></pre></td></tr></table></figure>
<p>+</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git add readme.txt </div><div class="line">$ git commit -m <span class="string">"branch test"</span></div><div class="line">[dev fec145a] branch <span class="built_in">test</span></div><div class="line"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>4.dev分支工作完成，切换回master分支—<code>git checkout master</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">D       test.txt</div><div class="line">Switched to branch <span class="string">'master'</span></div><div class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</div></pre></td></tr></table></figure>
</li>
<li><p>5.切换回<code>master</code>分支后，再查看<code>readme.txt</code>文件，刚才添加的内容不见了！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cat readme.txt</div><div class="line">Git is a distributed version control system.</div><div class="line">Git is a free software distributed under the GPL.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd3ydgltcgj20bn0663yf" alt="git-master"></p>
<ul>
<li>6.把dev分支的工作成果合并到master分支上—<code>git merge dev</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git merge dev</div><div class="line">Updating 1096410..33b2bcb</div><div class="line">Fast-forward</div><div class="line"> readme.txt | 3 ++-</div><div class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>git merge命令用于合并指定分支到当前分支。<br>合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">C:\git\learngit&gt;cat readme.txt</div><div class="line">Git is a distributed version control system.</div><div class="line">Git is a free software distributed under the GPL.</div><div class="line">Creating a new branch is quick.</div></pre></td></tr></table></figure></p>
<ul>
<li>7.合并完成后，删除dev分支—<code>git branch -d dev</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch -d dev</div><div class="line">Deleted branch dev (was fec145a).</div></pre></td></tr></table></figure>
</li>
</ul>
<p>删除后查看branch，就仅剩master分支了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch</div><div class="line">* master</div></pre></td></tr></table></figure></p>
<p>#因为创建、合并和删除分支非常快，所以鼓励使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。</p>
<h3 id="2-解决冲突"><a href="#2-解决冲突" class="headerlink" title="2. 解决冲突"></a><strong>2. 解决冲突</strong></h3><ol>
<li><p>创建新的分支<code>feature1</code>，并切换当该分支上.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b feature1</div><div class="line">Switched to a new branch <span class="string">'feature1'</span></div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>readme.txt</code>最后一行如下,并提交:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Creating a new branch is quick AND simple.</div></pre></td></tr></table></figure>
</li>
<li><p>切换到master分支上:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">Switched to branch <span class="string">'master'</span></div><div class="line">Your branch is ahead of <span class="string">'origin/master'</span> by 1 commit.</div><div class="line">  (use <span class="string">"git push"</span> to publish your <span class="built_in">local</span> commits)</div></pre></td></tr></table></figure>
<ul>
<li>这里git还会提示我们，当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。</li>
</ul>
</li>
<li><p>在<code>master</code>分支上把<code>readme.txt</code>文件最后行修改如下,并提交：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Creating a new branch is quick &amp; simple.</div></pre></td></tr></table></figure>
</li>
<li><p>当前<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，如下：<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd7kvmtx2xj20bt07k3yc" alt="master and feature1"></p>
<ul>
<li>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突。</li>
<li><p>仍然尝试去提交：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git merge feature1</div><div class="line">Auto-merging readme.txt</div><div class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> readme.txt</div><div class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</div></pre></td></tr></table></figure>
</li>
<li><p>这里便产生了冲突，git告诉我们<code>readme.txt</code>文件存在冲突，必须手动解决冲突后再提交。</p>
</li>
<li><code>git status</code>也告诉我们冲突了<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment"># Your branch is ahead of 'origin/master' by 2 commits.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Unmerged paths:</span></div><div class="line"><span class="comment">#   (use "git add/rm &lt;file&gt;..." as appropriate to mark resolution)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#       both modified:      readme.txt</span></div><div class="line"><span class="comment">#</span></div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>查看<code>readme.txt</code>的内容:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ cat readme.txt</div><div class="line">Git is a distributed version control system.</div><div class="line">Git is a free software distributed under the GPL.</div><div class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class="line">Creating a new branch is quick &amp; simple.</div><div class="line">=======</div><div class="line">Creating a new branch is quick AND simple.</div><div class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</div></pre></td></tr></table></figure>
<ul>
<li>这里Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，</li>
</ul>
</li>
<li>我们修改如下后保存,再进行提交：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Creating a new branch is quick and simple.</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add readme.txt </div><div class="line">$ git commit -m <span class="string">"conflict fixed"</span></div><div class="line">[master 59bc1cb] conflict fixed</div></pre></td></tr></table></figure>
<ol>
<li>现在master分支和feature1分支变成了下图所示：<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd7lapl2okj20fb07kmx0" alt="conflict fixed"></li>
<li><p>用带参数的<code>git log</code>也可以看到分支的合并情况:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</div><div class="line">*   59bc1cb conflict fixed</div><div class="line">|\</div><div class="line">| * 75a857c AND simple</div><div class="line">* | 400b400 &amp; simple</div><div class="line">|/</div><div class="line">* fec145a branch <span class="built_in">test</span></div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>最后删除<code>feature1</code>分支</p>
</li>
</ol>
<h3 id="3-分支管理策略"><a href="#3-分支管理策略" class="headerlink" title="3. 分支管理策略"></a><strong>3. 分支管理策略</strong></h3><p>在合并分支时，Fast forward模式下，删除分支后，会丢掉分支信息。如果强制禁用Fast forward模式，Git就会在<code>merge</code>时生成一个新的commit，这样，从分支历史上就可以看出分支信息。<br><code>--no-ff</code>方式的<code>git merge</code>:</p>
<ol>
<li><p>创建并切换<code>dev</code>分支,修改<code>readme.txt</code>内容后提交，并切换回<code>master</code>，在合并时使用<code>--no-ff</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</div><div class="line">Merge made by the <span class="string">'recursive'</span> strategy.</div><div class="line"> readme.txt |    1 +</div><div class="line"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure>
<ul>
<li>本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</li>
</ul>
</li>
<li><p>合并后，我们用<code>git log</code>看看分支历史:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</div><div class="line">*   7825a50 merge with no-ff</div><div class="line">|\</div><div class="line">| * 6224937 add merge</div><div class="line">|/</div><div class="line">*   59bc1cb conflict fixed</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>可以看到，不使用<code>Fast forward</code>模式，<code>merge</code>后就像这样:<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd7mculwy4j20dc075web" alt="merge with no-ff"></p>
</li>
<li><p>分支策略</p>
<ul>
<li>首先，master分支应是非常稳定的，仅用来发布新版本，平时不能在上面开发；</li>
<li>干活都在dev分支上，也就是说，dev分支是不稳定的。比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</li>
<li>在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</li>
</ul>
</li>
<li>团队合作的分支如：<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd7mgzkdfhj20du03ha9w" alt="团队合作的分支"></li>
</ol>
<h3 id="4-Bug分支"><a href="#4-Bug分支" class="headerlink" title="4. Bug分支"></a><strong>4. Bug分支</strong></h3><p>在修复bug的时候，工作只进行到一半，还没法提交。Git这里提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。</p>
<ol>
<li><p>如对<code>readme.txt</code>进行了修改，查看git状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line"><span class="comment"># On branch dev</span></div><div class="line"><span class="comment"># Changes not staged for commit:</span></div><div class="line"><span class="comment">#   (use "git add &lt;file&gt;..." to update what will be committed)</span></div><div class="line"><span class="comment">#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#       modified:   readme.txt</span></div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure>
<ul>
<li>分支暂时无法提交，但是必须在两个小时内修复该bug，怎么办？</li>
</ul>
</li>
<li><p>“储藏”当前工作现场，等以后恢复现场后继续工作—<code>git stash</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git stash</div><div class="line">Saved working directory and index state WIP on dev: 6224937 add merge</div><div class="line">HEAD is now at 6224937 add merge</div></pre></td></tr></table></figure>
<ul>
<li>除非有其他没有管理的文件，否则现在<code>git status</code>查看工作区，就是干净的.</li>
</ul>
</li>
<li><p>确定要在哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">Switched to branch <span class="string">'master'</span></div><div class="line">Your branch is ahead of <span class="string">'origin/master'</span> by 6 commits.</div><div class="line">$ git checkout -b issue-101</div><div class="line">Switched to a new branch <span class="string">'issue-101'</span></div></pre></td></tr></table></figure>
</li>
<li><p>修复bug，如把“Git is a free software …”改为“Git is A free software …”，然后提交.</p>
</li>
<li><p>修复完成后，切换到master分支，并完成合并，最后删除issue-101分支.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git merge --no-ff -m <span class="string">"merged bug fix 101"</span> issue-101</div><div class="line">Merge made by the <span class="string">'recursive'</span> strategy.</div><div class="line"> readme.txt |    2 +-</div><div class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</div></pre></td></tr></table></figure>
</li>
<li><p>bug修复了，第二天回来继续工作，需要回到<code>dev</code>分支，工作区干净，调用<code>git stash list</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git stash list</div><div class="line">stash@&#123;0&#125;: WIP on dev: 6224937 add merge</div></pre></td></tr></table></figure>
</li>
<li><p>恢复之前的工作区：</p>
<ul>
<li>用<code>git stash apply</code>恢复指定的stash，但是恢复后，<code>stash</code>内容并不删除，需要用<code>git stash drop</code>来删除；</li>
<li>用git stash pop，恢复的同时把stash内容也删了。</li>
</ul>
</li>
</ol>
<h3 id="5-Feature分支"><a href="#5-Feature分支" class="headerlink" title="5. Feature分支"></a><strong>5. Feature分支</strong></h3><p>软件开发，总有无穷无尽的新的功能要不断添加进来。添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后合并，最后删除该feature分支。</p>
<ol>
<li><p>开发代号为Vulcan的新功能：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b feature-vulcan</div><div class="line">Switched to a new branch <span class="string">'feature-vulcan'</span></div></pre></td></tr></table></figure>
</li>
<li><p>开发完毕，将<code>vulcan.py</code>添加，并提交。</p>
</li>
<li><p>切回dev，准备合并。一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。然而，此时接到上级命令，因经费不足，新功能必须取消！这时切换分支回dev，删除feature-vulcan分支。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git branch -d feature-vulcan</div><div class="line">error: The branch <span class="string">'feature-vulcan'</span> is not fully merged.</div><div class="line">If you are sure you want to delete it, run <span class="string">'git branch -D feature-vulcan'</span>.</div></pre></td></tr></table></figure>
<ul>
<li>Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan。</li>
</ul>
</li>
<li>则强行删除，删除成功。</li>
</ol>
<h3 id="6-多人协作"><a href="#6-多人协作" class="headerlink" title="6. 多人协作"></a><strong>6. 多人协作</strong></h3><h4 id="1-远程库"><a href="#1-远程库" class="headerlink" title="(1)远程库"></a><strong>(1)远程库</strong></h4><p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。</p>
<ol>
<li><p>查看远程库的信息—<code>git remote</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git remote</div><div class="line">origin</div></pre></td></tr></table></figure>
</li>
<li><p>显示更详细的信息—<code>git remote -v</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div><div class="line">origin  https://github.com/KoalaTree/learngit.git (fetch)</div><div class="line">origin  https://github.com/KoalaTree/learngit.git (push)</div></pre></td></tr></table></figure>
<ul>
<li>上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址.</li>
</ul>
</li>
</ol>
<h4 id="2-推送分支"><a href="#2-推送分支" class="headerlink" title="(2)推送分支"></a><strong>(2)推送分支</strong></h4><ol>
<li><p>把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
</li>
<li><p>并不是一定要把本地分支往远程推送。哪些分支需要推送，哪些不需要呢？</p>
<ul>
<li>master分支是主分支，因此要时刻与远程同步；</li>
<li>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li>
<li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li>
<li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li>
</ul>
</li>
</ol>
<h4 id="3-抓取分支"><a href="#3-抓取分支" class="headerlink" title="(3)抓取分支"></a><strong>(3)抓取分支</strong></h4><ol>
<li><p>模拟他人，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/KoalaTree/learngit</div><div class="line">Cloning into <span class="string">'learngit'</span>...</div><div class="line">remote: Counting objects: 46, <span class="keyword">done</span>.</div><div class="line">remote: Compressing objects: 100% (26/26), <span class="keyword">done</span>.</div><div class="line">remote: Total 46 (delta 16), reused 45 (delta 15)</div><div class="line">Receiving objects: 100% (46/46), 15.69 KiB | 6 KiB/s, <span class="keyword">done</span>.</div><div class="line">Resolving deltas: 100% (16/16), <span class="keyword">done</span>.</div></pre></td></tr></table></figure>
<ul>
<li>他人从远程库clone时，默认情况下，他只能看到本地的master分支。</li>
</ul>
</li>
<li><p>现在，他要在dev分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev origin/dev</div></pre></td></tr></table></figure>
</li>
<li><p>此后，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"add /usr/bin/env"</span></div><div class="line">[dev 291bea8] add /usr/bin/env</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line">$ git push origin dev</div><div class="line">Counting objects: 5, <span class="keyword">done</span>.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</div><div class="line">Writing objects: 100% (3/3), 349 bytes, <span class="keyword">done</span>.</div><div class="line">Total 3 (delta 0), reused 0 (delta 0)</div><div class="line">To git@github.com:michaelliao/learngit.git</div><div class="line">   fc38031..291bea8  dev -&gt; dev</div></pre></td></tr></table></figure>
</li>
<li><p>他已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git add hello.py </div><div class="line">$ git commit -m <span class="string">"add coding: utf-8"</span></div><div class="line">[dev bd6ae48] add coding: utf-8</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line">$ git push origin dev</div><div class="line">To git@github.com:michaelliao/learngit.git</div><div class="line"> ! [rejected]        dev -&gt; dev (non-fast-forward)</div><div class="line">error: failed to push some refs to <span class="string">'git@github.com:michaelliao/learngit.git'</span></div><div class="line">hint: Updates were rejected because the tip of your current branch is behind</div><div class="line">hint: its remote counterpart. Merge the remote changes (e.g. <span class="string">'git pull'</span>)</div><div class="line">hint: before pushing again.</div><div class="line">hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</div></pre></td></tr></table></figure>
<ul>
<li>推送失败，因为他人的最新提交和你试图推送的提交有冲突。</li>
</ul>
</li>
<li><p>解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ git pull</div><div class="line">remote: Counting objects: 5, <span class="keyword">done</span>.</div><div class="line">remote: Compressing objects: 100% (2/2), <span class="keyword">done</span>.</div><div class="line">remote: Total 3 (delta 0), reused 3 (delta 0)</div><div class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</div><div class="line">From github.com:michaelliao/learngit</div><div class="line">   fc38031..291bea8  dev        -&gt; origin/dev</div><div class="line">There is no tracking information <span class="keyword">for</span> the current branch.</div><div class="line">Please specify <span class="built_in">which</span> branch you want to merge with.</div><div class="line">See git-pull(1) <span class="keyword">for</span> details</div><div class="line"></div><div class="line">    git pull &lt;remote&gt; &lt;branch&gt;</div><div class="line"></div><div class="line">If you wish to <span class="built_in">set</span> tracking information <span class="keyword">for</span> this branch you can <span class="keyword">do</span> so with:</div><div class="line"></div><div class="line">    git branch --<span class="built_in">set</span>-upstream dev origin/&lt;branch&gt;</div></pre></td></tr></table></figure>
<ul>
<li>git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接。</li>
</ul>
</li>
<li><p>根据提示，设置dev和origin/dev的链接：根据提示，设置dev和origin/dev的链接：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch --<span class="built_in">set</span>-upstream dev origin/dev</div><div class="line">Branch dev <span class="built_in">set</span> up to track remote branch dev from origin.</div></pre></td></tr></table></figure>
</li>
<li><p>完成后再进行pull:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git pull</div><div class="line">Auto-merging hello.py</div><div class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> hello.py</div><div class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</div></pre></td></tr></table></figure>
</li>
<li><p><code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样，解决后提交，再push到远端。</p>
</li>
</ol>
<h4 id="4-多人协作工作模式"><a href="#4-多人协作工作模式" class="headerlink" title="(4)多人协作工作模式"></a><strong>(4)多人协作工作模式</strong></h4><ol>
<li><p>首先，可以试图用git push origin branch-name推送自己的修改；</p>
</li>
<li><p>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</p>
</li>
<li><p>如果合并有冲突，则解决冲突，并在本地提交；</p>
</li>
<li><p>没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！</p>
<ul>
<li>如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch --<span class="built_in">set</span>-upstream branch-name origin/branch-name</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p>get more:<br>《<a href="/2017/02/23/Abstract_git_notes(1)/" title="简洁git笔记(一)">简洁git笔记(一)</a>》<br>《<a href="/2017/03/06/Abstract_git_notes(3)/" title="简洁git笔记(三)">简洁git笔记(三)</a>》</p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> 远程仓库 </tag>
            
            <tag> 分支管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简洁git笔记(一)]]></title>
      <url>https://koalatree.github.io/2017/02/23/Abstract_git_notes(1)/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd0k751tujj20h7077758" alt="git"></p>
<p>目前世界上最先进的分布式版本控制系统–git.</p>
<h2 id="一、git的安装和配置"><a href="#一、git的安装和配置" class="headerlink" title="一、git的安装和配置"></a>一、git的安装和配置</h2><h3 id="下载安装git"><a href="#下载安装git" class="headerlink" title="下载安装git"></a><strong>下载安装git</strong></h3><ol>
<li>下载<a href="https://git-for-windows.github.io" target="_blank" rel="external">git for windows</a>. 然后按默认选项安装即可。安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</li>
</ol>
<a id="more"></a>
<ol>
<li>配置你的git账户。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"Your Name"</span></div><div class="line">$ git config --global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和email地址。</p>
<h2 id="二、创建版本库"><a href="#二、创建版本库" class="headerlink" title="二、创建版本库"></a>二、创建版本库</h2><p>版本库又名仓库(repository)，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>
<h3 id="1-版本库的创建"><a href="#1-版本库的创建" class="headerlink" title="1. 版本库的创建"></a><strong>1. 版本库的创建</strong></h3><ol>
<li>创建版本库目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mkdir learngit</div><div class="line">$ <span class="built_in">cd</span> learngit</div><div class="line">$ <span class="built_in">pwd</span></div><div class="line">/git/learngit</div></pre></td></tr></table></figure>
</li>
</ol>
<p><code>pwd</code>命令用于显示当前目录。在我的电脑上，这个仓库位于/git/learngit。</p>
<ol>
<li>创建版本库—<code>git init</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">Initialized empty Git repository <span class="keyword">in</span> C:/git/learngit/.git/</div></pre></td></tr></table></figure>
</li>
</ol>
<p>自动生成的<code>.git</code>的目录是Git用来跟踪管理版本库的，不要手动修改这个目录里面的文件。可修改系统的隐藏文件查看选项来显示此文件。</p>
<h3 id="2-添加文件至版本库"><a href="#2-添加文件至版本库" class="headerlink" title="2. 添加文件至版本库"></a><strong>2. 添加文件至版本库</strong></h3><ol>
<li>如：编写一个readme.txt文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Git is a version control system.</div><div class="line">Git is a free software.</div></pre></td></tr></table></figure>
</li>
</ol>
<p>注意一定要将它放到learngit目录下（其子目录下也可以）。</p>
<ol>
<li><p>添加文件至仓库—<code>git add</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add readme.txt</div></pre></td></tr></table></figure>
</li>
<li><p>提交文件至仓库—<code>git commit</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"wrote a readme file"</span></div><div class="line">[master (root-commit) cb926e7] wrote a readme file</div><div class="line"> 1 file changed, 2 insertions(+)</div><div class="line"> create mode 100644 readme.txt</div></pre></td></tr></table></figure>
</li>
</ol>
<p><code>git commit</code>命令中<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。<br><code>commit</code>命令可以一次提交很多文件。</p>
<h2 id="三、仓库管理"><a href="#三、仓库管理" class="headerlink" title="三、仓库管理"></a>三、仓库管理</h2><h3 id="1-文件的修改"><a href="#1-文件的修改" class="headerlink" title="1. 文件的修改"></a><strong>1. 文件的修改</strong></h3><ol>
<li><p>修改<code>readme.txt</code>文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Git is a distributed version control system.</div><div class="line">Git is a free software.</div></pre></td></tr></table></figure>
</li>
<li><p>查看仓库当前状态—<code>git status</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</div><div class="line"></div><div class="line">        modified:   readme.txt</div><div class="line"></div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。</p>
<ol>
<li><p>查看difference—<code>git diff</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git diff readme.txt</div><div class="line">diff --git a/readme.txt b/readme.txt</div><div class="line">index 0065b6f..0a30af0 100644</div><div class="line">--- a/readme.txt</div><div class="line">+++ b/readme.txt</div><div class="line">@@ -1,2 +1,2 @@</div><div class="line">-Git is a version control system.</div><div class="line">+Git is a distributed version control system.</div><div class="line"> Git is a free software.</div><div class="line">\ No newline at end of file</div></pre></td></tr></table></figure>
</li>
<li><p>添加并提交修改的文件</p>
</li>
</ol>
<h3 id="2-版本回退"><a href="#2-版本回退" class="headerlink" title="2. 版本回退"></a><strong>2. 版本回退</strong></h3><ol>
<li><p>再次修改<code>readme.txt</code>文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Git is a distributed version control system.</div><div class="line">Git is a free software distributed under the GPL.</div></pre></td></tr></table></figure>
</li>
<li><p>添加并提交</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git add readme.txt</div><div class="line">$ git commit -m <span class="string">"append GPL"</span></div><div class="line">[master 3628164] append GPL</div><div class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</div></pre></td></tr></table></figure>
</li>
<li><p>目前共有三个版本的<code>readme.txt</code><br>版本1：wrote a readme file、版本2：add distributed、版本3：append GPL</p>
</li>
<li>查看历史记录—<code>git log</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span></div><div class="line">commit 2294c5323dbb2bd48ed6452bb6db03de4cb9cab4</div><div class="line">Author: KoalaTree &lt;631548343@qq.com&gt;</div><div class="line">Date:   Thu Feb 23 14:50:12 2017 +0800</div><div class="line"></div><div class="line">    append GPL</div><div class="line"></div><div class="line">commit 70ff885150a052e1b40ab6156a1154be76794938</div><div class="line">Author: KoalaTree &lt;631548343@qq.com&gt;</div><div class="line">Date:   Thu Feb 23 14:41:21 2017 +0800</div><div class="line"></div><div class="line">    add distributed</div><div class="line"></div><div class="line">commit 0700efaf2a0a1551f2086cfce5393ce0d1dff038</div><div class="line">Author: KoalaTree &lt;631548343@qq.com&gt;</div><div class="line">Date:   Thu Feb 23 13:40:11 2017 +0800</div><div class="line"></div><div class="line">    wrote a readme file</div></pre></td></tr></table></figure>
</li>
</ol>
<p>加上<code>--pretty=oneline</code>参数可以减少输出信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --pretty=oneline</div><div class="line">2294c5323dbb2bd48ed6452bb6db03de4cb9cab4 append GPL</div><div class="line">70ff885150a052e1b40ab6156a1154be76794938 add distributed</div><div class="line">0700efaf2a0a1551f2086cfce5393ce0d1dff038 wrote a readme file</div></pre></td></tr></table></figure></p>
<ol>
<li>版本回退—<code>git reset</code><br>在Git中，用HEAD表示当前版本，也就是最新的提交的版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard <span class="string">"HEAD^"</span>  <span class="comment">#注意win10的shell把^当做换行转义了, 类似与\，这里使用"包起来即可</span></div><div class="line">HEAD is now at 70ff885 add distributed</div></pre></td></tr></table></figure>
</li>
</ol>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard HEAD~1</div></pre></td></tr></table></figure></p>
<ol>
<li><p>查看<code>readme.txt</code>内容版本—<code>cat readme.txt</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cat readme.txt</div><div class="line">Git is a distributed version control system.</div><div class="line">Git is a free software.</div></pre></td></tr></table></figure>
</li>
<li><p>再回到版本3<br>在不关掉命令行窗口的条件下，找到append GPL的commit id，指定回到未来的某个版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard 2294c5323</div><div class="line">HEAD is now at 2294c53 append GPL</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这里版本号没必要写全，前几位就可以了，Git会自动去找。</p>
<ol>
<li>查看命令—<code>git reflog</code><br>如果关掉了命令窗口，可以通过该命令来查看版本id,凭此回到最新的版本。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div><div class="line">2294c53 HEAD@&#123;0&#125;: reset: moving to 2294c5323</div><div class="line">70ff885 HEAD@&#123;1&#125;: reset: moving to HEAD~1</div><div class="line">2294c53 HEAD@&#123;2&#125;: commit: append GPL</div><div class="line">70ff885 HEAD@&#123;3&#125;: commit: add distributed</div><div class="line">0700efa HEAD@&#123;4&#125;: commit (initial): wrote a readme file</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="3-工作区和暂存区"><a href="#3-工作区和暂存区" class="headerlink" title="3. 工作区和暂存区"></a><strong>3. 工作区和暂存区</strong></h3><ol>
<li>工作区(Working Directory)<br>就是电脑里能看到的目录，如当前learngit文件夹就是一个工作区。<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd0g0fesszj20j507q74i" alt="工作区"></li>
<li>版本库(Repository)<br>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。<br>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。<br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd0g0zmo75j20cq06iaa8" alt="暂存区"></li>
<li>添加和提交文件步骤<br>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；<br>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</li>
<li>创建新的文件<code>LICENSE</code>，将其与<code>readme.txt</code>添加<code>git add</code><br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd0g9ogzdgj20cq06ijri" alt="stage1"></li>
<li>提交缓存区文件<code>git commit</code><br><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fd0ga1b9t9j20cv06iq32" alt="stage0"></li>
</ol>
<h3 id="4-撤销修改"><a href="#4-撤销修改" class="headerlink" title="4. 撤销修改"></a><strong>4. 撤销修改</strong></h3><ol>
<li><p>在将文件<code>git add</code>到缓存区后，修改了文件如</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat readme.txt</div><div class="line">Git is a distributed version control system.</div><div class="line">Git is a free software.</div><div class="line">She is so beautiful.</div></pre></td></tr></table></figure>
</li>
<li><p>利用<code>git status</code>查看状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">        modified:   readme.txt</div><div class="line"></div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</div><div class="line"></div><div class="line">        modified:   readme.txt</div><div class="line"></div><div class="line">Untracked files:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</div><div class="line"></div><div class="line">        git</div></pre></td></tr></table></figure>
</li>
<li><p>git提示我们可以使用命令来撤销工作区的修改—<code>git checkout -- filename</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- readme.txt</div></pre></td></tr></table></figure>
</li>
</ol>
<p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：<br>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，撤销修改就回到添加到暂存区后的状态。<br>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>
<ol>
<li>用命令<code>git reset HEAD file</code>可以把添加到暂存区的修改撤销掉(unstage)重新放回工作区。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git reset HEAD readme.txt</div><div class="line">Unstaged changes after reset:</div><div class="line">M       readme.txt</div></pre></td></tr></table></figure>
</li>
</ol>
<p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p>
<ol>
<li>再用<code>git status</code>查看<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">   (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">   (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</div><div class="line"></div><div class="line">       modified:   readme.txt</div><div class="line"></div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>现在暂存区是干净的，工作区有修改。</p>
<ol>
<li>最后利用<code>git checkout -- readme.txt</code>丢弃工作区的修改。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cat readme.txt</div><div class="line">Git is a distributed version control system.</div><div class="line">Git is a free software distributed under the GPL.</div></pre></td></tr></table></figure>
</li>
</ol>
<p>可见修改已经被丢弃，文件回到了当初的状态。</p>
<p>##小结</p>
<ol>
<li><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p>
</li>
<li><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</p>
</li>
<li><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>
</li>
</ol>
<h3 id="5-删除文件"><a href="#5-删除文件" class="headerlink" title="5. 删除文件"></a><strong>5. 删除文件</strong></h3><ol>
<li><p>添加一个新文件<code>test.txt</code>到Git并且提交</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git add test.txt</div><div class="line">$ git commit -m <span class="string">"add test.txt"</span></div><div class="line">[master 1096410] add test.txt</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line"> create mode 100644 test.txt</div></pre></td></tr></table></figure>
</li>
<li><p>在文件管理器中把无用的该文件删除，或者用rm命令删除</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm test.txt</div></pre></td></tr></table></figure>
</li>
<li><p>工作区和版本库一致，<code>git status</code>命令会立刻告诉你哪些文件被删除</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add/rm &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</div><div class="line"></div><div class="line">        deleted:    test.txt</div><div class="line"></div><div class="line">Untracked files:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</div><div class="line"></div><div class="line">        git</div><div class="line"></div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>若确实要从版本库中删除该文件—命令<code>git rm</code>删掉，并且<code>git commit</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git rm test.txt</div><div class="line">rm <span class="string">'test.txt'</span></div><div class="line">$ git commit -m <span class="string">"remove test.txt"</span></div><div class="line">[master d17efd8] remove test.txt</div><div class="line"> 1 file changed, 1 deletion(-)</div><div class="line"> delete mode 100644 test.txt</div></pre></td></tr></table></figure>
</li>
<li><p>若误删，把误删的文件恢复到最新版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- test.txt</div></pre></td></tr></table></figure>
</li>
</ol>
<p>get more:<br>《<a href="/2017/03/01/Abstract_git_notes(2)/" title="简洁git笔记(二)">简洁git笔记(二)</a>》<br>《<a href="/2017/03/06/Abstract_git_notes(3)/" title="简洁git笔记(三)">简洁git笔记(三)</a>》</p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> git仓库 </tag>
            
            <tag> 仓库管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows10系统安装TensorFlow]]></title>
      <url>https://koalatree.github.io/2017/02/21/TensorFlow_for_win10_system/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/bb4f51fbly1fcy63mvijpj20dw08c0v6" alt="人工智能"></p>
<p>11月29日，Google Brain工程师团队宣布在 TensorFlow 0.12 中加入初步的Windows支持。</p>
<p>在谷歌的支持下，TensorFlow 已成为 GitHub 上最受欢迎的机器学习开源项目。同时，谷歌也在 TensorFlow 框架中进行过各类研究、开源了其中一些项目，这些研究涉及到自然语言处理、机器翻译、图像描述、图像分类等等。<br><a id="more"></a><br>随着 TensorFlow r0.12 版的发布，这一开源软件库现已支持 Windows7、10 和 Server 2016。同时，这一新版本可以让用户在 TensorFlow 训练中得到 CUDA 8 的 GPU 加速。我们已将新版本在 PyPI 中封装成型。现在你可以使用命令‘pip install tensorflow’来安装 TensorFlow 了。</p>
<h2 id="一、安装python和python-pip"><a href="#一、安装python和python-pip" class="headerlink" title="一、安装python和python-pip"></a>一、安装python和python-pip</h2><h3 id="1-下载安装python"><a href="#1-下载安装python" class="headerlink" title="1. 下载安装python"></a><strong>1. 下载安装python</strong></h3><ol>
<li><p>下载<a href="https://www.python.org/ftp/python/3.5.2/python-3.5.2-amd64.exe" target="_blank" rel="external">python3.5.2 for windows10 AMD</a>.<br>##因为电脑是AMD显卡，所以3.5.2版本是我安装的版本，这个连接可以直接用下载工具下载。<br>需要其他版本请到<a href="https://www.python.org/downloads/windows/" target="_blank" rel="external">官网</a>直接下载。</p>
</li>
<li><p>安装python并配置python的环境变量.</p>
</li>
</ol>
<h3 id="2-下载安装python-pip"><a href="#2-下载安装python-pip" class="headerlink" title="2. 下载安装python-pip"></a><strong>2. 下载安装python-pip</strong></h3><ol>
<li>下载<a href="https://pypi.python.org/packages/11/b6/abcb525026a4be042b486df43905d6893fb04f05aac21c32c638e939e447/pip-9.0.1.tar.gz#md5=35f01da33009719497f01a4ba69d63c9" target="_blank" rel="external">python-pip</a>.</li>
<li>解压python-pip的安装包，进入到文件的目录中.</li>
<li>在这个文件夹按住Shift键单击鼠标右键-&gt;点击在此处打开命令窗口.</li>
<li>安装pip.在命令行执行如下命令。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python setup.py install</div></pre></td></tr></table></figure>
<ol>
<li>配置python-pip的环境变量,(一般python安装完毕后便会配置成功)。Pip的安装路径在Python的安装路径下的Scripts里面，所以把Pip的路径添加到Path变量里面就可以了。</li>
</ol>
<h2 id="二、安装TensorFlow"><a href="#二、安装TensorFlow" class="headerlink" title="二、安装TensorFlow"></a>二、安装TensorFlow</h2><p>如果上面python和python-pip安装没有问题，只需要执行一个指令就可以顺利安装TensorFlow。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:&gt; pip install tensorflow</div></pre></td></tr></table></figure>
<p>Tensorflow所需要的依赖会自动安装：<br><img src="http://ww1.sinaimg.cn/large/bb4f51fbly1fcy3aeijc3j205303k0sj" alt="依赖"></p>
<h2 id="三、你的第一个测试TensorFlow程序"><a href="#三、你的第一个测试TensorFlow程序" class="headerlink" title="三、你的第一个测试TensorFlow程序"></a>三、你的第一个测试TensorFlow程序</h2><h3 id="1-测试代码"><a href="#1-测试代码" class="headerlink" title="1. 测试代码"></a><strong>1. 测试代码</strong></h3><p><code>输出hello</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line">import tensorflow as tf</div><div class="line">hello = tf.constant(<span class="string">'Hello, TensorFlow!'</span>);</div><div class="line">sess = tf.Session();</div><div class="line">sess.run(hello);</div><div class="line">Hello, TensorFlow!</div></pre></td></tr></table></figure></p>
<p><code>10+32=？</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = tf.constant(10)</div><div class="line">b = tf.constant(32)</div><div class="line">sess.run(a+b)</div></pre></td></tr></table></figure></p>
<h3 id="2-输出成功结果"><a href="#2-输出成功结果" class="headerlink" title="2. 输出成功结果"></a><strong>2. 输出成功结果</strong></h3><p><img src="http://ww1.sinaimg.cn/large/bb4f51fbly1fcy37ntxe4j20ay05dwed" alt="结果"></p>
<p>至此TensorFlow已经安装完毕，请尽情使用它吧！</p>
]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://koalatree.github.io/2017/02/20/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<a id="more"></a>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
